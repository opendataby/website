<?php

/**
 * @file
 * Provides test functionality for the master module.
 */

/**
 * Tests the functionality of the Simpletest example content type.
 */
class MasterTestCase extends DrupalWebTestCase {
  protected $field;
  protected $instance;


  public static function getInfo() {
    return array(
      'name'  => 'Master',
      'description'  => 'Test the master module list.',
      'group' => 'Master'
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    // We will use the defaults from field_test and the number field.
    parent::setUp('field_test', 'number', 'master');
  }

  /**
   * Test module export list.
   */
  public function testModuleExport() {
    // First we create a number field, so we create a loose dependency on the
    // number module.
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'number_decimal',
      'settings' => array(
        'precision' => 8, 'scale' => 4, 'decimal_separator' => '.',
      )
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'number_decimal',
        ),
      ),
    );
    field_create_instance($this->instance);

    // Check if recommended modules contain 'field' modules.
    // @see https://drupal.org/node/2160697
    $recommended_masters = master_get_master_modules_recommendation(FALSE);
    $valid = in_array('number', $recommended_masters);
    $this->assertTrue($valid, '"Number" module is part of the recommended master module list.');

    // Set master modules.
    variable_set('master_modules', array('field_test'));

    // We have to reset our module_data to get an updated set.
    drupal_static_reset('system_rebuild_module_data');
    master_get_module_data(TRUE);

    // Check if the field_test is a master module.
    $master_modules = master_get_master_modules(MASTER_BASE);
    $valid = in_array('field_test', $master_modules);
    $this->assertTrue($valid, '"field_test" is recognized as master module.');

    // Check if the field module is recognized as required, as it still holds a
    // field.
    $required_modules = master_get_required_modules($master_modules);
    $valid = in_array('number', $required_modules);
    $this->assertTrue($valid, '"Number" is recognized as required module, due to the existing field.');

    // Delete fields again, to test if the required module disappears.
    field_delete_field($this->field['field_name']);
    // Purge the freshly deleted field, so it completely disappears from the
    // field list.
    field_purge_batch(1);

    // We have to reset our module_data to get an updated set.
    drupal_static_reset('system_rebuild_module_data');
    master_get_module_data(TRUE);

    // Check if the field module is recognized as required, as it still holds a
    // field.
    $required_modules = master_get_required_modules($master_modules);
    $valid = in_array('number', $required_modules);
    $this->assertFalse($valid, '"Number" is removed from required module list after deleting field.');

    variable_del('master_modules');
  }

  /**
   * Test master config version 2.
   */
  public function testMasterConfigV2() {
    variable_set('master_version', 2);
    variable_set('master_modules', array(
      'base' => array(
        'field_test',
      ),
    ));

    // Check if the field_test is a master module.
    $master_modules = master_get_master_modules(MASTER_BASE);
    $valid = in_array('field_test', $master_modules);
    $this->assertTrue($valid, '"field_test" is recognized as master module.');

    variable_del('master_version');
    variable_del('master_modules');
  }
}
